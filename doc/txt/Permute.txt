NAME
    Permute.pl - Do a permutation analysis with Zmapqtl or JZmapqtl

SYNOPSIS
      Permute.pl  [-b bin] [-X stem] [-m model] [-r reps] [-e email] [-c column] 
          [-t trait] [-I ihypo] [-a atrep] [-s] [-u] [-h]   

DESCRIPTION
    Permute.pl iterates using Prune and Zmapqtl or JZmapqqtl to determine
    significance thresholds based on permutation testing.

OPTIONS
    If the qtlcart.rc file if it exists, Permute.pl will first set its
    parameter values from that file. Any command line options will override
    the qtlcart.rc values. If a parameter has not been set by either the
    qtlcart.rc file or command line parameters, default values are set.

    -b  This option requires the path to the QTL Cartographer binaries and
        perl scripts. The default is *~/bin* directory.

    -r  requires an integer to control how many bootstrap iterations you
        want to do. The default is 1000.

    -X  This option allows you to specify the filename stem. The default is
        *qtlcart*.

    -e  This option requires an email address. The temporary log file will
        be sent to this address to indicate that the bootstrap is complete.
        If blank, then no email message will be sent. The default is not to
        use this option.

    -m  This option allows you to specify the Zmapqtl model to use. The
        default is interval mapping (3).

    -c  Use this option to specify which column in the Zmapqtl output file
        should be processed. The default is 4.

    -t  Use this option to specify which trait to analyze. If there are *t*
        traits, then a value greater than zero and less than or equal to *t*
        will cause Zmapqtl to be used. Otherwise, JZmapqtl will be used. The
        default is 1. Note that using this option with a negative value will
        set this option to 1.

    -I  Use this option to specify the hypothesis test for JZmapqtl. The
        default is 10. It is ignored if Zmapqtl is used.

    -s  requires no operand. This tells Permute.pl to save the permuted
        datasets and their analytical results. If used with a large number
        of permutations, a great deal of harddisk space will be used up. It
        is mainly for debugging purposes.

    -a  requires an integer operand indicating the last completed iteration.
        Useful if your machine crashed during the permutation test.

    -u  requires no operand. This is the Unger flag. If used, then the
        script will also calculate the sum and sum of squares for each
        permutation over the entire genome, and for each site over all
        permutations. These values will be saved to files that can be
        processed with RCpermute.pl to calculate site and permutation means
        and variances.

    -d  requires no operand. This is the Doust flag. If used, then the
        script will also calculate the sum and sum of squares for the GxE
        scores. It was put in at the request of Andrew Doust. It only works
        with JZmapqtl and models 14 or 34.

    -h  requires no operand. If used, it prints a usage message and exits.

EXAMPLE
    Suppose the files mletest.map and mletest.cro are in the current working
    directory.

        % Zmapqtl -X mletest -M 3 -A -V 
        % Permute.pl  -b /usr/local/bin -c 4 -r 500

    Will assume that the QTL Cartographer programs are in /usr/local/bin. It
    will use interval mapping and do 500 permutations. Note that you need to
    do an initial Zmapqtl run before beginning the permutation test. This
    initial run will have created a qtlcart.rc file that contains the model
    and stem information.

    If your computer went down during the permutation run, you can pick up
    where you left off. Suppose that Permute.pl had finished 323
    permutations in the above example. You would observe a file
    mletest.z3.cwt.323 in the current working directory. You could then run

        % Permute.pl  -b /usr/local/bin -c 4 -r 500 -a 323

    to continue with the permutation test starting at the 324th iteration
    and finishing with iteration 500.

    Suppose we have another data set with multiple traits: The map is in
    multitest.map and the data in multitest.cro. Further suppose that this
    data set has four traits and it is a backcross. As above, assume that
    the binaries are in /usr/local/bin.

        % JZmapqtl -X multitest -M 3 -t 5 -I 10 
        % Permute.pl -b /usr/local/bin  -c 5 -r 500 -I 10 -t 5

    Will use all the traits in a multitrait analysis and permute the data
    500 times. The likelihood ratio in the multitest.z0 file will be the
    focus of the test. We need to specify column 5 for use with JZmapqtl.

CAVEATS
    The -s option allows you to save the permuted datasets and analytical
    results. For iteration *i*, model *m*, filename stem *qtlcart* and
    single trait analysis, there will be files qtlcart.cro.i, qtlcart.zm.i
    and qtlcart.zm.cwt.i. For multitrait analysis, the qtlcart.cro.i will be
    saved along with the set of trait analysis files qtlcart.zt.i, where *t*
    is the trait.

    This option is mainly for debugging purposes. Be aware that a large
    number of permutations will use a great deal of disk space. You could
    modify the Permute.pl script to compress these files to save disk space.

SEE ALSO
    Zmapqtl(1), JZmapqtl(1), Prune(1), CWTupdate.pl(1), GetMaxLR.pl(1),
    EWThreshold.pl(1), RCpermute.pl(1)

AUTHORS
    In general, it is best to contact us via email
    (basten@statgen.ncsu.edu).

            Christopher J. Basten, B. S. Weir and Z.-B. Zeng
            Department of Statistics, North Carolina State University
            Raleigh, NC 27695-7566, USA
            Phone: (919)515-1934

