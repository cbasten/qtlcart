.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title ""<STANDARD INPUT>" 1"
.TH "<STANDARD INPUT>" 1 "Zmapqtl" "QTL Cartographer v1.17" "User Contributed Perl Documentation"
.SH "NAME"
Zmapqtl \- Composite interval mapping module
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBZmapqtl\fR [ \fB\-o\fR \fIoutput\fR ] [ \fB\-i\fR \fIinput\fR ] [ \fB\-m\fR \fImapfile\fR ]
[ \fB\-l\fR \fIlrfile\fR ] [ \fB\-S\fR \fIsrfile\fR ] [ \fB\-t\fR \fItrait\fR ] [ \fB\-M\fR \fIModel\fR ]  
[ \fB\-c\fR \fIchrom\fR ] [ \fB\-d\fR \fIwalk\fR ] [ \fB\-n\fR \fInbp\fR ] [ \fB\-w\fR \fIwindow\fR ]
[ \fB\-r\fR \fIperms\fR ]  [ \fB\-r\fR \fIboots\fR ]  
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBZmapqtl\fR uses composite interval mapping to map quantitative trait loci to
a map of molecular markers. It requires a molecular map that could be a random one produced by 
\&\fBRmap\fR,  or a real one in the same format as the output of 
\&\fBRmap\fR.   The sample could be a randomly generated one from 
\&\fBRcross\fR or a real one in the same format as the output of 
\&\fBRcross\fR. In addition, the program requires the results of the stepwise linear regression 
analysis of  \fBSRmapqtl\fR for composite interval mapping.
.SH "OPTIONS"
.IX Header "OPTIONS"
See \fB\f(BIQTLcart\fB\|(1)\fR for more information on the global options
\&\fB\-h\fR for help, \fB\-A\fR for automatic,  \fB\-V\fR for non-Verbose
\&\fB\-W path\fR for a working directory, \fB\-R file\fR to specify a resource
file, \fB\-e\fR to specify the log file, \fB\-s\fR to specify a seed for the
random number generator and \fB\-X stem\fR to specify a filename stem. 
The options below are specific to this program.
.PP
If you use this program without specifying any options, then you will
get into a menu that allows you to set them interactively.   
.IP "\fB\-o\fR" 4
.IX Item "-o"
This requires a filename for output.   \fBZmapqtl\fR will append the file if
it exists, and create a new file if it does not.   If not used, then \fBZmapqtl\fR will use
\&\fIqtlcart.z\fR.  
.IP "\fB\-i\fR" 4
.IX Item "-i"
This requires an input filename.    This file must exist.  It should be in the
same format as the output of \fBRcross\fR. The default file is \fIqtlcart.cro\fR. 
.IP "\fB\-m\fR" 4
.IX Item "-m"
\&\fBZmapqtl\fR requires a genetic linkage map.  This option requires
the name of a file containing the map.  It should be in the same format
that \fBRmap\fR outputs.  The default file is \fIqtlcart.map\fR. 
.IP "\fB\-t\fR" 4
.IX Item "-t"
Use this to specify which trait \fBZmapqtl\fR
will analyze.  If this number is greater than
the number of traits, then all traits will be analyzed.   The default is
to analyze trait 1 only.
.IP "\fB\-l\fR" 4
.IX Item "-l"
Allows the user to specify the name of the file containing results from
\&\fBLRmapqtl\fR.   \fBZmapqtl\fR reads those results and uses the information to
choose cofactors for some of the analysis methods.
.IP "\fB\-S\fR" 4
.IX Item "-S"
Allows the user to specify the name of the file containing results from
\&\fBSRmapqtl\fR. \fBZmapqtl\fR reads the results and uses the information to choose
cofactors for composite interval mapping model 6.
.IP "\fB\-M\fR" 4
.IX Item "-M"
\&\fBZmapqtl\fR assumes the specified model (see below) in the analysis. Model 3 is default.
.IP "\fB\-c\fR" 4
.IX Item "-c"
The user can specify a specific chromosome for \fBZmapqtl\fR to analyze.   
If zero, then all will be analyzed.
.IP "\fB\-d\fR" 4
.IX Item "-d"
\&\fBZmapqtl\fR walks along the chromosome at a rate that can be specified with this
option.  The default is to do an analysis
every  2 centiMorgans along the chromosome.
.IP "\fB\-n\fR" 4
.IX Item "-n"
Use this to indicate how many background parameters \fBZmapqtl\fR
uses  in composite interval  mapping.
This is used only with model 6, and gives an upper bound.  If fewer than
this number of markers are ranked in the \fISRmapqtl.out\fR file, then
less than the specified number of markers will be used.
.IP "\fB\-w\fR" 4
.IX Item "-w"
\&\fBZmapqtl\fR
blocks out a region of this many centiMorgans on either side of the markers flanking the test 
position when picking background markers.  It is 10 by default and is only used in
models 5 and 6.  We refer to it as the \fIwindow size\fR.
.IP "\fB\-r\fR" 4
.IX Item "-r"
\&\fBZmapqtl\fR can do a permutation test to determine the threshold for rejecting the
null hypothesis of no \s-1QTL\s0 at a site.  By default, this option sets the
number of permutations equal to 0, which means no permutation test is
run.  You can set it to a number < 10000 to do the test.  See Churchill and
Doerge (1994) for more details.  The results are in an interim file.  Use
\&\fBEqtl\fR to summarize them when enough repetitions have been done.  You need to run
\&\fBZmapqtl\fR without permutations or bootstraps at least once before you can do the 
permutation tests.  This option only allows for interval mapping (Model 3) or
composite interval mapping (Model 6).
.IP "\fB\-b\fR" 4
.IX Item "-b"
When used with argument 1, \fBZmapqtl\fR will do a single bootstrap.  You need to run 
\&\fBPrune\fR  to actually create the bootstrapped data set:  This option merely 
analyzes it and stores summary statistics in an interim file
\&\fIqtlcart.z3b\fR by default, for model 3.  You should also run 
\&\fBZmapqtl\fR  without bootstraps or
permutation tests before doing a bootstrap analysis.
.Sp
When used with an argument 2, \fBZmapqtl\fR will do a jackknife analysis.  Again,
\&\fBZmapqtl\fR should be run without this argument prior to doing a jackknife.
.SH "INPUT FORMAT"
.IX Header "INPUT FORMAT"
The input format of the molecular map should be the same as that of the output 
format from the program 
\&\fBRmap\fR.   The input format of the individual data should be the same as the output format
of the program 
\&\fBRcross\fR.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 1
\&        % Zmapqtl
.Ve
.PP
Calculates the likelihood ratio test statistics of the dataset in \fIqtlcart.cro\fR
using the map in \fIqtlcart.map\fR.
.PP
.Vb 1
\&        % nice Zmapqtl -A -V -i corn.cro -m corn.map -M 6 -r 500 &
.Ve
.PP
Calculates the likelihood ratio test statistics of the dataset in \fIcorn.cro\fR 
using the map in \fIcorn.map\fR.  Model 6 is used for analysis and a permutation test
with 500 replications is performed.  The program is nice'd as a courtesy to other
users, and run in the background so that the user can logout and relax. 
.SH "MODELS"
.IX Header "MODELS"
Different parameters for the \fB\-M\fR option allow for the analysis of the data
assuming different models.  Models 1\-3 were described in Zeng (1993, 1994).  
.IP "1." 4
Fit all the background markers.  This was meant for illustration of the method in
the original paper (Zeng, 1993), and should not be used for analysis.
.IP "2." 4
Fit all unlinked background markers.  This is another illustrative example and also 
should not be used.
.IP "3." 4
Fit only the mean (Lander and Botstein (1989) method)
.IP "4." 4
Fit a subset of the other markers, namely those unlinked markers with the 
highest correlation with the trait on each chromosome.  This is an \fIad hoc\fR model
programmed in anticipation of model 6 below.
.IP "5." 4
This model uses a pair of markers from each other chromosome and all linked 
markers that fall
outside a window around the flanking markers.  This window extends to 10 cM 
beyond the 
markers immediately flanking the test position.  The window size can be changed with
the \fB\-w\fR option.  This is another \fIad hoc\fR model
programmed in anticipation of model 6 below.
.IP "6." 4
This model uses a specified number of markers that fall
outside a window around the flanking markers.  This window extends to 10 cM 
beyond the 
markers immediately flanking the test position.  The number of markers are 
set by the \fB\-n\fR option.  You need to run  \fBSRmapqtl\fR
to rank the markers before using model 6.    You should use this for composite 
interval mapping when using markers ranked by \fBSRmapqtl\fR.   
.IP "7." 4
This model requires that you have already run \fBZmapqtl\fR and \fBEqtl\fR.  It reads in
the estimated \s-1QTL\s0 from the \fIEqtl.out\fR file and uses them as virtual markers to control for
the genetic background.   All identified markers are used that do not fall within the
window.   This has not been extensively tested:  Use it at your own risk.
.IP "8." 4
Like model 7, this requires a prior run of \fBZmapqtl\fR and \fBEqtl\fR.  Instead of using 
virtual markers, \fBZmapqtl\fR uses the closest flanking markers to identified \s-1QTL\s0.  
Again, all of these markers outside the window are used.   This is good model.
You can iterate this process to see if a stable set of cofactors can be identified.
See the script below and the \fB\f(BIModel8.pl\fB\|(1)\fR man page for more details.
.PP
The default is to fit only the mean, that is to use interval mapping.
.SH "PERMUTATION TESTS"
.IX Header "PERMUTATION TESTS"
Churchill and Doerge (1994) describe a method to calculate the threshold
values for quantitative trait mapping that we have implemented in this
program.  Basically, it does a permutation of the trait values and the
genotypes and redoes the analysis.  Over the number of replicates, two
types of thresholds are defined: \*(L"experimentwise\*(R" and \*(L"comparisonwise\*(R".
We calculate the experimentwise thresholds, but only give p values
for the comparisonwise values to save on storage space.  The p values
give the proportion of permuted replicates that have loglikelihood 
ratios larger than the observed ratios. 
.PP
If you choose to do permutation tests, you need to run  \fBZmapqtl\fR
with the model of choice prior to doing the permutation test.  Also, if 
the program terminates prematurely, you can restart it from where it left
off to complete the permutation test.  
.SH "REFERENCES"
.IX Header "REFERENCES"
.IP "1." 4
Churchill, G. A.  and R. W. Doerge (1994) Empirical threshold values for 
quantitative trait mapping. \fIGenetics\fR \fB138\fR, 963\-971.
.IP "2." 4
Lander, E. S. and D. Botstein (1989) Mapping Mendelian factors underlying 
quantitative traits using \s-1RFLP\s0 linkage maps. \fIGenetics\fR \fB121\fR, 185\-199.
.IP "3." 4
Zeng, Zhao-Bang (1993) Theoretical basis for separation of multiple linked gene 
effects in mapping quantitative trait loci.
\&\fIProc. Natl. Acad. Sci., \s-1USA\s0\fR \fB90\fR, 10972\-10976.
.IP "4." 4
Zeng, Zhao-Bang (1994) Precision mapping of quantitative trait loci.
\&\fIGenetics\fR \fB136\fR, 1457\-1468.
.SH "CAVEATS"
.IX Header "CAVEATS"
Model 7 has not been extensively tested.   Remember that you will need to run
\&\fBZmapqtl\fR with some other model (say 3 or 6) and then run \fBEqtl\fR prior to using
model 7.  
.PP
Model 8 requires a prior run of \fBZmapqtl\fR and \fBEqtl\fR as well.   There is a shell script
called \fBModel8.csh\fR in the \fBscripts\fR subdirectory that allows you to easily iterate using
model 8.   Try using it to see whether your set of cofactors (or estimated \s-1QTL\s0) becomes
stable after a few iterations.   A low threshold may lead to adding and dropping putative
\&\s-1QTL\s0 over consecutive analyses using Model 8.  Here is the shell script:
.PP
.Vb 54
\&        #!/usr/bin/csh
\&        #
\&        #  Run Model 8 iteration
\&        #           Copyright 2001 Christopher J. Basten
\&        #   Usage:
\&        #   Model8  bindir  stem   siglevel  iterations  max_nbp
\&        #     bindir is the binary subdirectory
\&        #     stem is the filename stem
\&        #     siglevel  is the significance level to declare a QTL
\&        #     iterations is the number of iterations
\&        #     max_nbp is the maximal number of background parameters.
\&        #
\&        if ( $1 == '-h' ) then
\&        echo "    Usage:  Model8.csh bindir  stem   siglevel  iterations  max_nbp"
\&        echo "Where"
\&        echo "        bindir  = QTL Cart. binary directory"
\&        echo "          stem  = filename stem"
\&        echo "      siglevel  = Significance level to declare a QTL"
\&        echo "    iterations  = number of iterations"
\&        echo "       max_nbp  = maximal number of background parameters"
\&        echo " "
\&        echo "Now exiting"
\&        exit
\&        endif
\&        set bindir=$1
\&        set stem=$2
\&        set siglevel=$3
\&        set iterations=$4
\&        set maxnbp=$5
\&        $bindir/Qstats -X $stem -A -V
\&        $bindir/Zmapqtl -A -V -M 3
\&        $bindir/Eqtl -A -V -S $siglevel
\&        #
\&        #  Save the original files
\&        #
\&        /usr/bin/mv $stem.eqt $stem.eqt.0
\&        /usr/bin/mv $stem.z $stem.z.0
\&        /usr/bin/cp $stem.sr $stem.sr.0
\&        #
\&        #  Use model 8 iteratively with cofactors from previous run.
\&        #
\&        set i=1
\&        while ( $i < $iterations )
\&        echo "Doing iteration $i"
\&        $bindir/Zmapqtl -A -V -M 8 -n $maxnbp
\&        /usr/bin/rm $stem.sr 
\&        $bindir/Eqtl -A -V -S $siglevel
\&        /usr/bin/cp $stem.sr $stem.sr.$i
\&        /usr/bin/mv $stem.eqt $stem.eqt.$i
\&        /usr/bin/mv $stem.z $stem.z.$i
\&        @ i++
\&        end
\&        /usr/bin/rm $stem.sr 
\&        echo "Finished"
.Ve
.PP
The above script has been translated into \fBPerl\fR to make it more useful.  The 
\&\fBModel8.pl\fR script can take command line parameters and is self\-documenting.
.SH "BUGS"
.IX Header "BUGS"
It is likely that we will abandon the internal permutation tests in \fBZmapqtl\fR.  It is
more efficient to use \fBPrune\fR and a batch file to do the same job.  This paradigm will 
allow users to do permutation tests with any of the programs.  Of course, you will
need access to a \s-1UNIX\s0 platform to do this.   
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fB\f(BIEmap\fB\|(1)\fR,  
\&\fB\f(BIRmap\fB\|(1)\fR,  
\&\fB\f(BIRqtl\fB\|(1)\fR, 
\&\fB\f(BIRcross\fB\|(1)\fR, 
\&\fB\f(BIQstats\fB\|(1)\fR, 
\&\fB\f(BILRmapqtl\fB\|(1)\fR,
\&\fB\f(BIBTmapqtl\fB\|(1)\fR,
\&\fB\f(BISRmapqtl\fB\|(1)\fR, 
\&\fB\f(BIJZmapqtl\fB\|(1)\fR, 
\&\fB\f(BIEqtl\fB\|(1)\fR,
\&\fB\f(BIPrune\fB\|(1)\fR, 
\&\fB\f(BIPreplot\fB\|(1)\fR,  
\&\fB\f(BIMImapqtl\fB\|(1)\fR, 
\&\fB\f(BIMultiRegress\fB\|(1)\fR,
\&\fB\f(BIExamples\fB\|(1)\fR
\&\fB\f(BISSupdate.pl\fB\|(1)\fR, 
\&\fB\f(BIPrepraw.pl\fB\|(1)\fR, 
\&\fB\f(BIEWThreshold.pl\fB\|(1)\fR, 
\&\fB\f(BIGetMaxLR.pl\fB\|(1)\fR, 
\&\fB\f(BIPermute.pl\fB\|(1)\fR, 
\&\fB\f(BIVert.pl\fB\|(1)\fR, 
\&\fB\f(BICWTupdate.pl\fB\|(1)\fR, 
\&\fB\f(BIZtrim.pl\fB\|(1)\fR, 
\&\fB\f(BISRcompare.pl\fB\|(1)\fR, 
\&\fB\f(BITtransform.pl\fB\|(1)\fR, 
\&\fB\f(BITestExamples.pl\fB\|(1)\fR, 
\&\fB\f(BIModel8.pl\fB\|(1)\fR, 
\&\fB\f(BIDobasics.pl\fB\|(1)\fR, 
\&\fB\f(BIBootstrap.pl\fB\|(1)\fR 
.SH "CONTACT INFO"
.IX Header "CONTACT INFO"
In general, it is best to contact us via email (basten@statgen.ncsu.edu).
.PP
.Vb 5
\&        Christopher J. Basten, B. S. Weir and Z.-B. Zeng
\&        Bioinformatics Research Center, North Carolina State University
\&        1523 Partners II Building/840 Main Campus Drive
\&        Raleigh, NC 27695-7566     USA
\&        Phone: (919)515-1934
.Ve
.PP
Please report all bugs via email to qtlcart\-bug@statgen.ncsu.edu.
.PP
The \fB\s-1QTL\s0 Cartographer\fR web site ( http://statgen.ncsu.edu/qtlcart ) has
links to the manual, man pages, ftp server and supplemental 
materials.   
